# какие сервисы будут запускаться
services:
  # придумываем имя сервису
  web-app:
    build:
      # указываем где искать Dockerfile (нашего приложения джанго)
      context: .
    # прописвыаем какие порты должны быть проброшенны из данного докер контейнера в нашу систему
    ports:
      - "8000:8000"
    # подключаем локальную папку ./service к папке в докер контейнере
    # те все изменения в локальной папке будут происходить в докер контейнере
    volumes:
      - ./service:/service
    # создаём окружение джанго
    environment:
      - DB_HOST=database    # ссылка на другой сервис в docker-compose
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass

    # указываем какую команду нужно запустить для запуска джанго сервера
    # sh -c - запускаем линукс shell, 0.0.0.0:8000 все адреса на данной машине на 8000 порт
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

    # установливаем зависимость данного сервиса от сервиса database, чтобы web-app запускался только после database
    depends_on:
      - database

  # придумываем название для приложения (датабазы)
  database:
    # указываем название образа в докерхабе, alpine облегчённая версия линукс
    image: postgres:14.6-alpine
    # создаём окружение postgres и указываем переменные для родключения джанго к дб
    # POSTGRES_DB - придумываем имя для дб (dbname) POSTGRES_USER - придумываем имя юзеру
    environment:
      - POSTGRES_DB=dbname
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=pass

  # придумываем имя для сервиса redis
  redis:
    image: redis:7.0.5-alpine
    hostname: redis

 # придумываем название для приложения Celery
  worker:
    build:
      context: .
    # придумываем hostname, по какому хостнейму будет определяться этот сервис
    hostname: worker
    # entrypoint - базовая команда вызывая которую мы будем писать команды этому сервису
    entrypoint: celery
    # celery_app - файл который мы сейчас создадим, app - переменная которую мы сейчас создадим
    # worker - создаём воркера, --loglevel=info - задаём уровень логирования
    command: -A celery_app.app worker --loglevel=info
    # монтируем папку в selery потому что по сути selefy и есть джано приложение
    volumes:
      - ./service:/service
    links:
      # выступает в качестве брокера
      - redis
    # устанавливаем зависимость от сервиса redis, запуск только после запуска redis
    depends_on:
      - redis
      - database
      # тк worker также является джанго приложением у него должна быть связь с дб
    environment:
      - DB_HOST=database    # ссылка на другой сервис в docker-compose
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass

  # веб приложение с графической оболочкой пдля просмотра тасков
  flower:
    build:
      context: .
    hostname: flower
    entrypoint: celery
    # команда запуска Celery, для запуска этого приложения
    command: -A celery_app.app flower
    volumes:
      - ./service:/service

    # зависимости как и у celety
    links:
      # выступает в качестве брокера
      - redis
    # устанавливаем зависимость от сервиса redis, запуск только после запуска redis
    depends_on:
      - redis
    ports:
      # пробрасываем порт в нашу локальную машину
      - "5555:5555"















